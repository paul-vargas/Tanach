//=============================================================================//=============================================================================////              UtilityLib.js - Library of CVK's favorite utilities////   Modified: 26 Oct 2014 for Supplements//// Contains two standard Sarissa files:////     1. Basic Sarissa-only operations.//     2. Page loading function.//     3. Cookie handing functions.//     4. Miscellaneous functions////=============================================================================//=== 1 =======================================================================////   1. Basic Sarissa-only operations (Docs are Sarissa docs.)////   filename = getFilename() - Gets the file name of the calling file.//   baseURL = getBaseURL(Filename) - Gets the page base URL, all before Filename.//   xmlDoc = loadSarissaDoc(File) - Requires baseURL be set previously.//   setAsXSL(xmlDoc) - Also sets the output method to 'xml'.//   x = getXSLVariable(xslDoc, name) //   x = getXSLParam( xslDoc, name) //   setXSLVariable(xslDoc, name, value)//   setXSLParam(xslDoc, name, value)//   text = getNodeText(node)//   text = getSingleNodeText( sarissaDoc, name ) //   text = getSingleNodeAttribute( sarissaDoc, name ) //   alertDoc(Label, Doc){////=============================================================================// Gets the file name of the calling file.function getFilename() {  var filePath  = window.location.href ;  var filePieces = filePath.split("/") ;  var filename = filePieces[filePieces.length-1] ;  return filename ;  }  function getHost(){  return window.location.hostname;  }  function getPort(){  return window.location.port;  }  function getBaseURL(Filename){  var href = window.location.href;  var baseURL = href.split(Filename) ;//  alert("*****  Base URL: " + baseURL[0] + "  *****") ;  return baseURL[0] ;  }  function loadSarissaDoc(filename){  var Error = 0 ;  var Filename = baseURL + filename  var xmlhttp = new XMLHttpRequest();    try{    xmlhttp.open("GET", filename, false);      }  catch( e) {    alert("UtilityLib:loadSarissaDoc(Filename): Error in xmlhttp.open of " + filename +" .") ;    Error = 1 ;    }  try{    xmlhttp.send('');      }  catch(e){    alert("UtilityLib:loadSarissaDoc(Filename): Error in xmlhttp.send('') of " + filename +" .") ;    Error = Error + 2 ;    }  var oDoc = xmlhttp.responseXML ;  if(oDoc != null){    oDoc.setProperty("SelectionLanguage", "XPath") ;    var ParseErrorText = Sarissa.getParseErrorText(oDoc) ;    if (ParseErrorText != Sarissa.PARSED_OK) {      var oDocText = new XMLSerializer().serializeToString(oDoc);      alert("UtilityLib:loadSarissaDoc(Filename): Parsing error from Sarissa.getParseErrorText(..) for "       + filename +" ." + "\n\nError response: " + ParseErrorText       + "\n\nDocument length: " + oDocText.length       + "\n\nDocument: " + oDocText ) ;      Error = Error + 4 ;      }    }  else{    alert("UtilityLib:loadSarissaDoc(Filename): xmlhttp.responseXML returns null for " + filename +" .") ;    Error = Error + 8 ;    }  if(Error > 0 ){    alert ("loadSarissaDoc: Error loading file \n\n" + filename         + " .\n\nError code: " + Error + " . The returned document will be set to empty.\n\n" );    oDoc = Sarissa.getDomDocument() ;      }       return oDoc ;  } function setAsXSL(xmlDoc){  xmlDoc.setProperty("SelectionNamespaces", "xmlns:xsl='http://www.w3.org/1999/XSL/Transform'") ;  var outputnode = xmlDoc.selectSingleNode("//xsl:output[@method=\'" + "html" + "\']");  outputnode.setAttribute("method", "xml") ;  }    // Modified 7 July 2011 to get either a variable (no warning) or a param (warning).function getXSLVariable( xslDoc, name ) {//  alert("Getting XSL variable " + name + "." ) ;  var c = xslDoc.selectSingleNode("//xsl:variable[@name=\'" + name + "\']") ;  if(c==null){    var doctext = new XMLSerializer().serializeToString(xslDoc).substring(400, 500) ;    alert("utilitylib:getXSLVariable(...): Parameter " + name + " isn't in the XSL document as a xsl:variable. "      + "Will try to get an xsl:param of that name."        + "\n\nThe XSL file has contents: \n" + doctext )  ;    return getXSLParam(xslDoc, name) ;  }  var t = c.firstChild;  return t.nodeValue ;  }// Modified 7 July 2011 to set either a variable (no warning) or a param (warning).function setXSLVariable( xslDoc, name, value ) {//  alert("Setting XSL variable " + name + " to " + value ) ;  var c = xslDoc.selectSingleNode("//xsl:variable[@name=\'" + name + "\']") ;  if (c==null){    var doctext = new XMLSerializer().serializeToString(xslDoc).substring(400, 500) ;    alert("utilitylib:setXSLVariable(...): Parameter " + name + " isn't in the XSL document as an xsl:variable. "      + "Will try to set an xsl:param of that name to the value, " + value +"."      + "\n\nThe XSL file has contents: \n" + doctext )  ;    setXSLParam(xslDoc, name, value) ;    }  else{    var t = c.firstChild;    var newt = xslDoc.createTextNode(value) ; // Not working for int.    c.replaceChild(newt, t) ;    }  }  function getXSLParam( xslDoc, name ) {//  alert("Getting xsl:param " + name + "." ) ;  var doctext = new XMLSerializer().serializeToString(xslDoc).substring(400, 500) ;  var c = xslDoc.selectSingleNode("//xsl:param[@name=\'" + name + "\']") ;  if(c==null){    alert("utilitylib:getXSLParam(...): xsl:param " + name + " isn't in the XSL document. "        + "\n\nThe XSL file has contents: \n" + doctext )  ;  }  var t = c.firstChild;  return t.nodeValue ;  }  function setXSLParam( xslDoc, name, value ) {//  alert("Setting xsl:param " + name + " to " + value ) ;  var doctext = new XMLSerializer().serializeToString(xslDoc).substring(400, 500) ;  var c = xslDoc.selectSingleNode("//xsl:param[@name=\'" + name + "\']") ;  if (c==null){    alert("utilitylib:setXSLParam(...): xsl:param " + name + " isn't in the XSL document "      + "and can't be set to the value, " + value +"."        + "\n\nThe XSL file has contents: \n" + doctext )  ;     }  else{    var t = c.firstChild;    var newt = xslDoc.createTextNode(value) ; // Not working for int.    c.replaceChild(newt, t) ;    }  }  function getNodeText( node) {  if( node==null){    return null;    }  var t = node.firstChild;  return t.nodeValue ;  }// Be careful to distinguish between Text and Attribute nodes!function getSingleNodeText( sarissaDoc, name ) {  var c = sarissaDoc.selectSingleNode(name) ;  if( c==null){    return null;    }  var t = c.firstChild;  return t.nodeValue ;  }  // Be careful to distinguish between Text and Attribute nodes!function getSingleNodeAttribute( sarissaDoc, name ) {  var c = sarissaDoc.selectSingleNode(name) ;  if( c==null){    return null;    }  return c.value ;  }  function alertDoc(Label, Doc){  alert(Label +"\n\n" + new XMLSerializer().serializeToString(Doc) ) ;  return ;  }//=== 2 =======================================================================////   2. Page loading function////=============================================================================////  Transforms an XML file by an XSL file according//  to a template in the XSL file to a node in the document.////  xmlFile - XML file loaded by loadSarissaDoc.//  xslFile - XSL file loaded by loadSarissaDoc.//  template - Name of a template in the XSL file.//  node - Node in the displayed document.//function setTemplateToNode(xmlFile, xslFile, template, node){   setXSLParam(xslFile, "template", template) ;   var xsltpro = new XSLTProcessor() ;   xsltpro.importStylesheet(xslFile);   var newDoc = xsltpro.transformToDocument(xmlFile) ;//   alert(new XMLSerializer().serializeToString(newDoc) ) ;   Sarissa.updateContentFromNode(xmlFile, node, xsltpro) ;   }//=== 3 ======================================================================//=============================================================================////  3. Cookie handling functions//// Contains:////       value = askForCookie( name, defaultvalue) ;//       clearCookies() ;//       createCookie( name, value, days ) ;//       value = readCookie(name) ;//        //=============================================================================// The name is the name of the cookie being sought,// usually this is the element name of the selection list.// defaultvalue is the value to return if the cookie// isn't available.function askForCookie( name, defaultvalue) {    thisCookie = readCookie(name) ;    if (thisCookie == null ){      return defaultvalue;      }    return thisCookie ;    }    function clearCookies(){    for (var i =0 ; i != CookieNames.length; i++){      createCookie(CookieNames[i], "", -1) ;      }    document.getElementById('CookieCount').innerHTML = "No cookies are defined." ;    document.getElementById('Cookie').innerHTML = "null" ;    document.getElementById('UnexpectedCookies').innerHTML = "" ;    var SpanElements = document.getElementsByTagName("span") ;    for (var i = 0; i != SpanElements.length; i++){      var id = SpanElements[i].getAttribute("id") ;      if(id != null && id != "CookieCount" && id != "Cookie"){        SpanElements[i].innerHTML = " " ;         }      }    }    function createCookie(name, value, days){    var date = new Date();    date.setTime(date.getTime()+(days*24*60*60*1000));    var expires = "; expires="+date.toGMTString();    document.cookie = name+"="+value+expires+"; path=/";    }    // The following function is from www.quirksmode.org/js/cookies.html  function readCookie(name){    var nameEQ = name + "=";    var ca = document.cookie.split(';');    for(var i=0;i < ca.length;i++){      var c = ca[i];      while (c.charAt(0)==' ') c = c.substring(1,c.length);      if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);      }    return null;    } //=== 4 ======================================================================//===========================================================================////  4. Miscellaneoous functions//// Contains:////       function showID(ID) ;    Positions window at element having specified ID.//       newString = deblank(String) ;  Eliminates blanks.//       boolean = isBlank(String) ;    String is blank.//       setSelectedValue(ID, Value) ; sets the value into a pulldown list.//       getSelectedValue(ID) ; gets the value into a pulldown list.//        //=============================================================================function showID(ID){    var e = document.getElementById(ID) ;    if(e==null){      alert("utilitylib:showID(ID): Can't find " + ID + " in document.") ;      }    else{//      window.scrollTo( e.offsetLeft, e.offsetTop);        e.scrollIntoView(true); // 26 Feb 2010 needed for Windows.         }    }function deblank(inputString){  var result = ''  for (i=0;i<inputString.length; i++){     if (inputString.charAt(i) != ' '){       result = result + inputString.charAt(i) ;     }  }  return result ;  }  function isBlank( s){    if(s==''){      return true ;      }    for (i=0; i < s.length; i++){      if (s.charAt(i) != ' '){        return false ;        }      }    return true ;    }    // Sets the specified HTML element, an option list, to have// a particular value, value,  selected.  If it's not in the list,// the first value is selected.function setSelectedValue( elementName, value ){    var e = document.getElementById(elementName) ;     var found = false ;    for (i=0; i < e.options.length; i++){      if ( e.options[i].value == value){        e.options[i].selected = true ;        found = true ;        }      }    if (!found){      e.options[0].selected=true ;      }    }// Gets from the specified HTML element, an option list, the// currently selected value.  A cookie with the element's// name is filled with the value.function getSelectedValue( elementName ) {    var e = document.getElementById(elementName) ;     return e.value;    }     //=== 5 ======================================================================//===========================================================================////  5. Unicode representation functions//// Contains:////       UnicodeRep(unicodeText);   Converts a Unicode string to its representations //       unicodeText = hexStringToUnicodeString(hexString) ;//                       Gets Unicode text from a hex string, 00200020.//                       Blanks are removed before conversion.//     //        //=============================================================================// Gets representations of the input Unicode text. function UnicodeRepresentations(txt){    this.Names = "" ;    this.HexValues = "" ;    this.QueryHexValues = "" ;    this.HTMLValues = "" ;    this.Invalids = "" ;    this.Valid = 0 ;    this.Invalid = 0 ;    if(txt.length = 0) return ;        Unicode = new Array() ;        Unicode[ 0] = new UnicodeChar( '\u0020', "0020", "Space") ;        Unicode[ 1] = new UnicodeChar( '\u002f', "002f", "Slash") ;        Unicode[ 2] = new UnicodeChar( '\u0591', "0591", "Etnachta") ;        Unicode[ 3] = new UnicodeChar( '\u0592', "0592", "Segol") ;        Unicode[ 4] = new UnicodeChar( '\u0593', "0593", "Shalshelet") ;        Unicode[ 5] = new UnicodeChar( '\u0594', "0594", "Zaqef-qatan") ;        Unicode[ 6] = new UnicodeChar( '\u0595', "0595", "Zaqef-gadol") ;        Unicode[ 7] = new UnicodeChar( '\u0596', "0596", "Tipeha") ;        Unicode[ 8] = new UnicodeChar( '\u0597', "0597", "Revia") ;        Unicode[ 9] = new UnicodeChar( '\u0598', "0598", "Zarqa") ;        Unicode[10] = new UnicodeChar( '\u0599', "0599", "Pashta") ;        Unicode[11] = new UnicodeChar( '\u059a', "059a", "Yetiv") ;        Unicode[12] = new UnicodeChar( '\u059b', "059b", "Tevir") ;        Unicode[13] = new UnicodeChar( '\u059c', "059c", "Geresh") ;        Unicode[14] = new UnicodeChar( '\u059d', "059d", "Geresh-muqdam") ;        Unicode[15] = new UnicodeChar( '\u059e', "059e", "Gereshayim") ;        Unicode[16] = new UnicodeChar( '\u059f', "059f", "Qarney-para") ;        Unicode[17] = new UnicodeChar( '\u05a0', "05a0", "Telisha-gedola") ;        Unicode[18] = new UnicodeChar( '\u05a1', "05a1", "Pazer") ;  // Note gap following        Unicode[19] = new UnicodeChar( '\u05a3', "05a3", "Munah") ;        Unicode[20] = new UnicodeChar( '\u05a4', "05a4", "Mahapakh") ;        Unicode[21] = new UnicodeChar( '\u05a5', "05a5", "Merkha") ;        Unicode[22] = new UnicodeChar( '\u05a6', "05a6", "Merkha-kefula") ;        Unicode[23] = new UnicodeChar( '\u05a7', "05a7", "Darga") ;        Unicode[24] = new UnicodeChar( '\u05a8', "05a8", "Qadma") ;        Unicode[25] = new UnicodeChar( '\u05a9', "05a9", "Telisha-qetana") ;        Unicode[26] = new UnicodeChar( '\u05aa', "05aa", "Yera-ben-yomo") ;        Unicode[27] = new UnicodeChar( '\u05ab', "05ab", "Ole") ;        Unicode[28] = new UnicodeChar( '\u05ac', "05ac", "Iluy") ;        Unicode[29] = new UnicodeChar( '\u05ad', "05ad", "Dehi") ;        Unicode[30] = new UnicodeChar( '\u05ae', "05ae", "Zinor") ; // Note gap following        Unicode[31] = new UnicodeChar( '\u05b0', "05b0", "Sheva") ;        Unicode[32] = new UnicodeChar( '\u05b1', "05b1", "Hataf-segol") ;        Unicode[33] = new UnicodeChar( '\u05b2', "05b2", "Hataf-patah") ;        Unicode[34] = new UnicodeChar( '\u05b3', "05b3", "Hataf-qamats") ;        Unicode[35] = new UnicodeChar( '\u05b4', "05b4", "Hiriq") ;        Unicode[36] = new UnicodeChar( '\u05b5', "05b5", "Tsere") ;        Unicode[37] = new UnicodeChar( '\u05b6', "05b6", "Segol") ;        Unicode[38] = new UnicodeChar( '\u05b7', "05b7", "Patah") ;        Unicode[39] = new UnicodeChar( '\u05b8', "05b8", "Qamats") ;        Unicode[40] = new UnicodeChar( '\u05b9', "05b9", "Holam") ;         Unicode[41] = new UnicodeChar( '\u05ba', "05ba", "Holam-haser") ;        Unicode[42] = new UnicodeChar( '\u05bb', "05bb", "Qubuts") ;        Unicode[43] = new UnicodeChar( '\u05bc', "05bc", "Dagesh") ;        Unicode[44] = new UnicodeChar( '\u05bd', "05bd", "Meteg") ;        Unicode[45] = new UnicodeChar( '\u05be', "05be", "Maqaf") ;        Unicode[46] = new UnicodeChar( '\u05bf', "05bf", "Rafe") ;        Unicode[47] = new UnicodeChar( '\u05c0', "05c0", "Paseq") ;        Unicode[48] = new UnicodeChar( '\u05c1', "05c1", "Shin-dot") ;        Unicode[49] = new UnicodeChar( '\u05c2', "05c2", "Sin-dot") ;        Unicode[50] = new UnicodeChar( '\u05c3', "05c3", "Sof-pasuq") ;        Unicode[51] = new UnicodeChar( '\u05c4', "05c4", "Upper-dot") ;        Unicode[52] = new UnicodeChar( '\u05c5', "05c5", "Lower-dot") ; // Note gap following        Unicode[53] = new UnicodeChar( '\u05d0', "05d0", "Alef") ;        Unicode[54] = new UnicodeChar( '\u05d1', "05d1", "Bet") ;        Unicode[55] = new UnicodeChar( '\u05d2', "05d2", "Gimel") ;        Unicode[56] = new UnicodeChar( '\u05d3', "05d3", "Dalet") ;        Unicode[57] = new UnicodeChar( '\u05d4', "05d4", "He") ;        Unicode[58] = new UnicodeChar( '\u05d5', "05d5", "Vav") ;        Unicode[59] = new UnicodeChar( '\u05d6', "05d6", "Zayin") ;        Unicode[60] = new UnicodeChar( '\u05d7', "05d7", "Het") ;        Unicode[61] = new UnicodeChar( '\u05d8', "05d8", "Tet") ;        Unicode[62] = new UnicodeChar( '\u05d9', "05d9", "Yod") ;        Unicode[63] = new UnicodeChar( '\u05da', "05da", "Final-kaf") ;        Unicode[64] = new UnicodeChar( '\u05db', "05db", "Kaf") ;        Unicode[65] = new UnicodeChar( '\u05dc', "05dc", "Lamed") ;        Unicode[66] = new UnicodeChar( '\u05dd', "05dd", "Final-mem") ;        Unicode[67] = new UnicodeChar( '\u05de', "05de", "Mem") ;        Unicode[68] = new UnicodeChar( '\u05df', "05df", "Final-nun") ;        Unicode[69] = new UnicodeChar( '\u05e0', "05e0", "Nun") ;        Unicode[70] = new UnicodeChar( '\u05e1', "05e1", "Samekh") ;        Unicode[71] = new UnicodeChar( '\u05e2', "05e2", "Ayin") ;        Unicode[72] = new UnicodeChar( '\u05e3', "05e3", "Final-pe") ;        Unicode[73] = new UnicodeChar( '\u05e4', "05e4", "Pe") ;        Unicode[74] = new UnicodeChar( '\u05e5', "05e5", "Final-tsadi") ;        Unicode[75] = new UnicodeChar( '\u05e6', "05e6", "Tsadi") ;        Unicode[76] = new UnicodeChar( '\u05e7', "05e7", "Qof") ;        Unicode[77] = new UnicodeChar( '\u05e8', "05e8", "Resh") ;        Unicode[78] = new UnicodeChar( '\u05e9', "05e9", "Shin") ;        Unicode[79] = new UnicodeChar( '\u05ea', "05ea", "Tav") ;        Unicode[80] = new UnicodeChar( '\u200d', "200d", "Zero-width-joiner") ;              for (i=0; i < txt.length; i++){        var c = txt.charAt(i) ;        Found = false ;        for (j=0; j < Unicode.length; j++){          if(c ==   Unicode[j].char){            this.Valid = this.Valid + 1 ;            this.Names = this.Names + Unicode[j].name.toLowerCase()  + " " ;            this.HexValues = this.HexValues + " " + Unicode[j].hex  + " " ;            this.QueryHexValues = this.QueryHexValues +  Unicode[j].hex   ;            this.HTMLValues = this.HTMLValues + "&#x" + Unicode[j].hex + ";" ;            if(Unicode[j].name=="Space"){              this.Names = this.Names + " ";              this.HexValues = this.HexValues + " " ;              this.HTMLValues = this.HTMLValues + " ";              }            Found = true ;            break ;            }          }        if(!Found){          this.Invalid = this.Invalid + 1 ;          this.Invalids = this.Invalids + "'" + c + "'," ;          }        }     }    function UnicodeChar( Character, HexValue, Name) {  this.char = Character ;  this.hex = HexValue ;  this.name = Name ;  }         function hexStringToUnicodeString(codedString){  codedString = codedString.replace(/%20/g, '') ;  var n = codedString.length/4 ;  if (n < 1){    return "" ;  }  var c = new Array() ;  var s = "" ;  for ( i=0; i < n ; i++){    c[i] = "" ;    for ( j=0; j < 4; j++){      c[i] = c[i] + codedString.charAt(4*i+j) ;    } ;    s = s + String.fromCharCode(parseInt(c[i], 16)) ;   } ;  return s ;}//=============================================================================//=============================================================================//   EOF